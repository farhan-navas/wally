// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma schema for beta, use beta db! Currently using beta
generator client {
    provider = "prisma-client-js"
    output = "../node_modules/@prisma/client-beta"
}

// datasource db {
    // provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    // url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    chats         Chat[]   
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Wally 
model Chat {
    id           String    @id @default(cuid())
    userId       String
    chatHeader   String

    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages     Message[]

    // profile fields
    name         String
    gender       String
    birthDate    DateTime?
    relationship String
    heartLevel   Int       @default(1) 
    race         String? 
    country      String?
    language     String
    
    @@index([userId])
}

enum Sender {
    USER
    WALLY
}

model Message {
    id          String        @id @default(cuid())
    chatId      String
    content     String
    vectorKey   String?       @unique // reference to pinecone db vector key
    messageBy   Sender

    // stores all generated messages, # user messages == 1, # wally messages >= 1
    allMessages String[]      @default([])
    files       Attachment[]

    createdAt   DateTime      @default(now())
    chat        Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)

    @@index([chatId])
}

model Attachment {
    id           String  @id @default(cuid())
    messageId    String
    name         String?
    contentType  String?
    url          String

    message      Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@index([messageId])
}